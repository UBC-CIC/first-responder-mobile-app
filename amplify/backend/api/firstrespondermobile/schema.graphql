type AttendeeData {
  id: String!
  externalUserId: String
  meetingID: String
  name: String
  role: String
}

type AttendeeDataConnection {
  items: [AttendeeData]
  nextToken: String
}

type AttendeeDetail {
  attendee_id: String!
  attendee_join_type: String
  attendee_type: String
  first_name: String
  last_name: String
  phone_number: String!
  user_role: String
  organization: String
}

type AttendeeInfo {
  AttendeeId: String
  ExternalUserId: String
  JoinToken: String
}

type Availability {
  overrides: [Override]
  schedules: [Schedule]
}

input CreateAttendeeDataInput {
  id: String!
  externalUserId: String
  meetingID: String
  name: String
  role: String
}

input CreateFirstResponderProfileInput {
  first_name: String
  last_name: String
  occupation: String
  phone_number: String!
}

input CreateMeetingDetailInput {
  meeting_id: String!
  create_date_time: String
  meeting_status: String
  end_date_time: String
}

input CreateMeetingInput {
  id: String!
}

input CreateSpecialistProfileInput {
  availability: AWSJSON
  created_date_time: String
  email: String
  first_name: String
  is_paged: Boolean
  last_name: String
  notes: String
  organization: String
  phone_number: String!
  profile_picture: String
  updated_date_time: String
  user_role: String
  user_status: String
}

input DeleteAttendeeDataInput {
  id: String!
}

input DeleteFirstResponderProfileInput {
  phone_number: String!
}

input DeleteMeetingDetailInput {
  meeting_id: String!
}

input DeleteMeetingInput {
  id: String!
}

input DeleteSpecialistProfileInput {
  phone_number: String!
}

type FirstResponderProfile {
  first_name: String
  last_name: String
  occupation: String
  phone_number: String!
}

type FirstResponderProfileConnection {
  items: [FirstResponderProfile]
  nextToken: String
}

type MediaPlacement {
  AudioFallbackUrl: String
  AudioHostUrl: String
  ScreenDataUrl: String
  ScreenSharingUrl: String
  ScreenViewingUrl: String
  SignalingUrl: String
  TurnControlUrl: String
}

type Meeting {
  id: String!
  ExternalMeetingId: String
  MediaPlacement: MediaPlacement
  MediaRegion: String!
  MeetingId: String!
}

type MeetingConnection {
  items: [Meeting]
  nextToken: String
}

type MeetingData {
  MeetingId: String!
  ExternalMeetingId: String
  MediaPlacement: MediaPlacement!
  MediaRegion: String!
}

type MeetingDetail {
  meeting_id: String!
  create_date_time: String
  meeting_status: String
  end_date_time: String
  external_meeting_id: String
  meeting_comments: String
  attendees: [AttendeeDetail!]
}

type MeetingDetailConnection {
  items: [MeetingDetail]
  nextToken: String
}

type MeetingInfo {
  Attendee: AttendeeInfo
  Meeting: MeetingData!
  id: String!
}

enum ModelAttributeTypes {
  _null
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
}

input ModelBooleanInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  eq: Boolean
  ne: Boolean
}

input ModelFloatInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  between: [Float]
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
}

input ModelIDInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
  size: ModelSizeInput
}

input ModelIntInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

input ModelSizeInput {
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

enum ModelSortDirection {
  ASC
  DESC
}

input ModelStringInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
  size: ModelSizeInput
}

type Mutation {
  createFirstResponderProfile(
    input: CreateFirstResponderProfileInput!
  ): FirstResponderProfile
  createSpecialistProfile(
    input: CreateSpecialistProfileInput!
  ): SpecialistProfile
  deleteFirstResponderProfile(
    input: DeleteFirstResponderProfileInput!
  ): FirstResponderProfile
  deleteSpecialistProfile(
    input: DeleteSpecialistProfileInput!
  ): SpecialistProfile
  joinChimeMeeting(
    externalAttendeeId: String
    firstName: String
    lastName: String
    phoneNumber: String
    region: String
    role: String
    title: String
    attendeeType: String
    organization: String,
    location: GeolocationCoordinatesInput
  ): MeetingInfo @function(name: "firstresponderjoinmeeting-${env}")
  updateFirstResponderProfile(
    input: UpdateFirstResponderProfileInput!
  ): FirstResponderProfile
  updateSpecialistProfile(
    input: UpdateSpecialistProfileInput!
  ): SpecialistProfile
  createMeeting(input: CreateMeetingInput!): Meeting
  updateMeeting(input: UpdateMeetingInput!): Meeting
  deleteMeeting(input: DeleteMeetingInput!): Meeting
  createAttendeeData(input: CreateAttendeeDataInput!): AttendeeData
  updateAttendeeData(input: UpdateAttendeeDataInput!): AttendeeData
  deleteAttendeeData(input: DeleteAttendeeDataInput!): AttendeeData
  createMeetingDetail(input: CreateMeetingDetailInput!): MeetingDetail
  updateMeetingDetail(input: UpdateMeetingDetailInput!): MeetingDetail
  deleteMeetingDetail(input: DeleteMeetingDetailInput!): MeetingDetail
  generateMeetingId: String @function(name: "firstrespondergeneratesessionid-${env}")
}

type Override {
  end_time: String
  override_type: String
  start_time: String
}

type Query {
  getFirstResponderProfile(phone_number: String!): FirstResponderProfile
  getSpecialistProfile(phone_number: String!): SpecialistProfile
  listFirstResponderProfiles(
    filter: TableFirstResponderProfileFilterInput
    limit: Int
    nextToken: String
  ): FirstResponderProfileConnection
  listSpecialistProfiles(
    filter: TableSpecialistProfileFilterInput
    limit: Int
    nextToken: String
  ): SpecialistProfileConnection
  querySpecialistProfilesByUserStatusGsi(
    after: String
    first: Int
    user_status: String!
  ): SpecialistProfileConnection
  getMeeting(id: String!): Meeting
  listMeetings(
    filter: TableMeetingFilterInput
    limit: Int
    nextToken: String
  ): MeetingConnection
  getAttendeeData(id: String!): AttendeeData
  listAttendeeData(
    filter: TableAttendeeDataFilterInput
    limit: Int
    nextToken: String
  ): AttendeeDataConnection
  getMeetingDetail(meeting_id: String!): MeetingDetail
  listMeetingDetails(
    filter: TableMeetingDetailFilterInput
    limit: Int
    nextToken: String
  ): MeetingDetailConnection
  queryMeetingDetailsByMeetingStatusGsi(
    meeting_status: String!
    first: Int
    after: String
  ): MeetingDetailConnection
}

type Schedule {
  availability_type: String
  day_of_week: Int
  end_seconds_since_midnight: Int
  start_seconds_since_midnight: Int
  timezone: String
}

type SpecialistProfile {
  availability: Availability
  created_date_time: String
  email: String
  first_name: String
  is_paged: Boolean
  last_name: String
  notes: String
  organization: String
  phone_number: String!
  profile_picture: String
  updated_date_time: String
  user_role: String
  user_status: String
  location: GeolocationCoordinates
}

type GeolocationCoordinates {
  latitude: Float
  longitude: Float
}

input GeolocationCoordinatesInput {
  latitude: Float
  longitude: Float
}

type SpecialistProfileConnection {
  items: [SpecialistProfile]
  nextToken: String
}

type Subscription {
  onCreateFirstResponderProfile(
    first_name: String
    last_name: String
    occupation: String
    phone_number: String
  ): FirstResponderProfile
    @aws_subscribe(mutations: ["createFirstResponderProfile"])
  onCreateSpecialistProfile(
    email: String
    first_name: String
    last_name: String
    phone_number: String
    user_status: String
  ): SpecialistProfile @aws_subscribe(mutations: ["createSpecialistProfile"])
  onDeleteFirstResponderProfile(
    first_name: String
    last_name: String
    occupation: String
    phone_number: String
  ): FirstResponderProfile
    @aws_subscribe(mutations: ["deleteFirstResponderProfile"])
  onDeleteSpecialistProfile(
    email: String
    first_name: String
    last_name: String
    phone_number: String
    user_status: String
  ): SpecialistProfile @aws_subscribe(mutations: ["deleteSpecialistProfile"])
  onUpdateFirstResponderProfile(
    first_name: String
    last_name: String
    occupation: String
    phone_number: String
  ): FirstResponderProfile
    @aws_subscribe(mutations: ["updateFirstResponderProfile"])
  onUpdateSpecialistProfile(
    email: String
    first_name: String
    last_name: String
    phone_number: String
    user_status: String
  ): SpecialistProfile @aws_subscribe(mutations: ["updateSpecialistProfile"])
  onCreateMeeting(id: String): Meeting
    @aws_subscribe(mutations: ["createMeeting"])
  onUpdateMeeting(id: String): Meeting
    @aws_subscribe(mutations: ["updateMeeting"])
  onDeleteMeeting(id: String): Meeting
    @aws_subscribe(mutations: ["deleteMeeting"])
  onCreateAttendeeData(
    id: String
    externalUserId: String
    meetingID: String
    name: String
    role: String
  ): AttendeeData @aws_subscribe(mutations: ["createAttendeeData"])
  onUpdateAttendeeData(
    id: String
    externalUserId: String
    meetingID: String
    name: String
    role: String
  ): AttendeeData @aws_subscribe(mutations: ["updateAttendeeData"])
  onDeleteAttendeeData(
    id: String
    externalUserId: String
    meetingID: String
    name: String
    role: String
  ): AttendeeData @aws_subscribe(mutations: ["deleteAttendeeData"])
  onCreateMeetingDetail(
    meeting_id: String
    create_date_time: String
    meeting_status: String
    end_date_time: String
  ): MeetingDetail @aws_subscribe(mutations: ["createMeetingDetail"])
  onUpdateMeetingDetail: MeetingDetail @aws_subscribe(mutations: ["updateMeetingDetail"])
  onDeleteMeetingDetail(
    meeting_id: String
    create_date_time: String
    meeting_status: String
    end_date_time: String
  ): MeetingDetail @aws_subscribe(mutations: ["deleteMeetingDetail"])
}

input TableAttendeeDataFilterInput {
  id: TableStringFilterInput
  externalUserId: TableStringFilterInput
  meetingID: TableStringFilterInput
  name: TableStringFilterInput
  role: TableStringFilterInput
}

input TableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input TableFirstResponderProfileFilterInput {
  first_name: TableStringFilterInput
  last_name: TableStringFilterInput
  occupation: TableStringFilterInput
  phone_number: TableStringFilterInput
}

input TableFloatFilterInput {
  between: [Float]
  contains: Float
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
  notContains: Float
}

input TableIDFilterInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
}

input TableIntFilterInput {
  between: [Int]
  contains: Int
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
  notContains: Int
}

input TableMeetingDetailFilterInput {
  meeting_id: TableStringFilterInput
  create_date_time: TableStringFilterInput
  meeting_status: TableStringFilterInput
  end_date_time: TableStringFilterInput
}

input TableMeetingFilterInput {
  id: TableStringFilterInput
}

input TableSpecialistProfileFilterInput {
  availability: AWSJSON
  created_date_time: TableStringFilterInput
  email: TableStringFilterInput
  first_name: TableStringFilterInput
  is_paged: TableBooleanFilterInput
  last_name: TableStringFilterInput
  notes: TableStringFilterInput
  organization: TableStringFilterInput
  phone_number: TableStringFilterInput
  profile_picture: TableStringFilterInput
  updated_date_time: TableStringFilterInput
  user_role: TableStringFilterInput
  user_status: TableStringFilterInput
}

input TableStringFilterInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
}

input UpdateAttendeeDataInput {
  id: String!
  externalUserId: String
  meetingID: String
  name: String
  role: String
}

input UpdateFirstResponderProfileInput {
  first_name: String
  last_name: String
  occupation: String
  phone_number: String!
}

input UpdateMeetingDetailInput {
  meeting_id: String!
  create_date_time: String
  meeting_status: String
  end_date_time: String
}

input UpdateMeetingInput {
  id: String!
}

input UpdateSpecialistProfileInput {
  availability: AWSJSON
  created_date_time: String
  email: String
  first_name: String
  is_paged: Boolean
  last_name: String
  notes: String
  organization: String
  phone_number: String!
  profile_picture: String
  updated_date_time: String
  user_role: String
  user_status: String
  location: AWSJSON
}
