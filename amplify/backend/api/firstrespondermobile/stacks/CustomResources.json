{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "An auto-generated nested stack.",
  "Metadata": {},
  "Parameters": {
    "AppSyncApiId": {
      "Type": "String",
      "Description": "The id of the AppSync API associated with this project."
    },
    "AppSyncApiName": {
      "Type": "String",
      "Description": "The name of the AppSync API",
      "Default": "AppSyncSimpleTransform"
    },
    "env": {
      "Type": "String",
      "Description": "The environment name. e.g. Dev, Test, or Production",
      "Default": "NONE"
    },
    "S3DeploymentBucket": {
      "Type": "String",
      "Description": "The S3 bucket containing all deployment assets for the project."
    },
    "S3DeploymentRootKey": {
      "Type": "String",
      "Description": "An S3 key relative to the S3DeploymentBucket that points to the root\nof the deployment directory."
    },
    "AuthRoleName": {
      "Type": "String",
      "Default": "AuthRoleName"
    }
  },
  "Resources": {
    "AppSyncIdParameter": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Name": "/firstresponder/apiid",
        "Type": "String",
        "Value": {
          "Ref": "AppSyncApiId"
        },
        "Description": "GraphQL Api ID for Amplify App"
      }
    },
    "FirstResponderProfileDataSource": {
      "Type": "AWS::AppSync::DataSource",
      "Properties": {
        "ApiId": {
          "Ref": "AppSyncApiId"
        },
        "Description": "Appsync Datasource for FirstResponderProfile",
        "DynamoDBConfig": {
          "AwsRegion": {
            "Ref": "AWS::Region"
          },
          "TableName": "first-responder-profile"
        },
        "Name": "FirstResponderProfile",
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "DataSourceRole",
            "Arn"
          ]
        },
        "Type": "AMAZON_DYNAMODB"
      }
    },
    "SpecialistProfileDataSource": {
      "Type": "AWS::AppSync::DataSource",
      "Properties": {
        "ApiId": {
          "Ref": "AppSyncApiId"
        },
        "Description": "Appsync Datasource for SpecialistProfile",
        "DynamoDBConfig": {
          "AwsRegion": {
            "Ref": "AWS::Region"
          },
          "TableName": "specialist-profile"
        },
        "Name": "SpecialistProfile",
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "DataSourceRole",
            "Arn"
          ]
        },
        "Type": "AMAZON_DYNAMODB"
      }
    },
    "MeetingDataDataSource": {
      "Type": "AWS::AppSync::DataSource",
      "Properties": {
        "ApiId": {
          "Ref": "AppSyncApiId"
        },
        "Description": "Appsync Datasource for MeetingData",
        "DynamoDBConfig": {
          "AwsRegion": {
            "Ref": "AWS::Region"
          },
          "TableName": "meeting-data"
        },
        "Name": "MeetingData",
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "DataSourceRole",
            "Arn"
          ]
        },
        "Type": "AMAZON_DYNAMODB"
      }
    },
    "MeetingDetailDataSource": {
      "Type": "AWS::AppSync::DataSource",
      "Properties": {
        "ApiId": {
          "Ref": "AppSyncApiId"
        },
        "Description": "Appsync Datasource for MeetingDetail",
        "DynamoDBConfig": {
          "AwsRegion": {
            "Ref": "AWS::Region"
          },
          "TableName": "meeting-detail"
        },
        "Name": "MeetingDetail",
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "DataSourceRole",
            "Arn"
          ]
        },
        "Type": "AMAZON_DYNAMODB"
      }
    },
    "DataSourceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "appsync.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Description": "Role for AppSync DataSources",
        "RoleName": "FirstResponderDataSourceDDBRole"
      }
    },
    "DataSourcePolicy": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": [
        "DataSourceRole"
      ],
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:DeleteItem",
                "dynamodb:GetItem",
                "dynamodb:PutItem",
                "dynamodb:Query",
                "dynamodb:Scan",
                "dynamodb:UpdateItem"
              ],
              "Resource": "*"
            }
          ]
        },
        "PolicyName": "FirstResponderDataSourceDDBPolicy",
        "Roles": [
          {
            "Ref": "DataSourceRole"
          }
        ]
      }
    },
    "FirstResponderDataSourceResolverQuery": {
      "Type" : "AWS::AppSync::Resolver",
      "DependsOn": "FirstResponderProfileDataSource", 
      "Properties" : {
          "ApiId" : {"Ref": "AppSyncApiId"},
          "DataSourceName" : "FirstResponderProfile",
          "FieldName" : "getFirstResponderProfile",
          "RequestMappingTemplate" : "{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"GetItem\",\n    \"key\" : {\n        \"phone_number\" : $util.dynamodb.toDynamoDBJson($ctx.args.phone_number)\n    }\n}\n",
          "ResponseMappingTemplate" : "$utils.toJson($ctx.result)",
          "TypeName" : "Query"
        }
    },
    "FirstResponderDataSourceResolverQueryAll": {
      "Type" : "AWS::AppSync::Resolver",
      "DependsOn": "FirstResponderProfileDataSource", 
      "Properties" : {
          "ApiId" : {"Ref": "AppSyncApiId"},
          "DataSourceName" : "FirstResponderProfile",
          "FieldName" : "listFirstResponderProfiles",
          "TypeName" : "Query",
          "RequestMappingTemplate": "{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"Scan\",\n    #if( $ctx.args.count )\n        \"limit\": $ctx.args.count,\n    #end\n    #if( ${ctx.args.nextToken} )\n        \"nextToken\": \"${ctx.args.nextToken}\"\n    #end\n}\n",
          "ResponseMappingTemplate": "{\n    \"items\": $utils.toJson($ctx.result.items),\n    #if( ${ctx.result.nextToken} )\n        \"nextToken\": \"${ctx.result.nextToken}\",\n    #end\n}\n"
        }
    },
    "FirstResponderDataSourceResolverMutationCreate": {
      "Type" : "AWS::AppSync::Resolver",
      "DependsOn": "FirstResponderProfileDataSource", 
      "Properties" : {
        "ApiId" : {"Ref": "AppSyncApiId"},
        "TypeName" : "Mutation",
        "DataSourceName" : "FirstResponderProfile",
        "FieldName" : "createFirstResponderProfile",
        "RequestMappingTemplate": "#set( $d = $util.dynamodb )\n#set( $values = $d.toMapValues($ctx.args))\n$!{values.put(\"ups\", $d.toNumber(1))}\n$!{values.put(\"downs\", $d.toNumber(0))}\n$!{values.put(\"version\", $d.toNumber(1))}\n$!{values.put(\"created_at\", $d.toDynamoDB($util.time.nowISO8601()))}\n$!{values.put(\"lastUpdated\", $values.get(\"created_at\"))}\n{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"PutItem\",\n    \"key\" : {\n        \"phone_number\" : $d.toStringJson($utils.autoId())\n    },\n    \"attributeValues\" : $util.toJson($values),\n}\n",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)"
      }
    },
    "FirstResponderDataSourceResolverMutationDelete": {
      "Type" : "AWS::AppSync::Resolver",
      "DependsOn": "FirstResponderProfileDataSource", 
      "Properties" : {
        "ApiId" : {"Ref": "AppSyncApiId"},
        "TypeName" : "Mutation",
        "DataSourceName" : "FirstResponderProfile",
        "FieldName" : "deleteFirstResponderProfile",
        "RequestMappingTemplate": "{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"DeleteItem\",\n    \"key\": {\n        \"phone_number\": $util.dynamodb.toStringJson($ctx.args.phone_number)\n    },\n    #if( $ctx.args.containsKey(\"expectedVersion\") )\n        \"condition\" : {\n            \"expression\"       : \"attribute_not_exists(phone_number) OR version = :expectedVersion\",\n            \"expressionValues\" : {\n                \":expectedVersion\" : $util.dynamodb.toNumberJson($ctx.args.expectedVersion)\n            }\n        },\n    #end\n}\n",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)"
      }
    },
    "FirstResponderDataSourceResolverMutationUpdate": {
      "Type" : "AWS::AppSync::Resolver",
      "DependsOn": "FirstResponderProfileDataSource", 
      "Properties" : {
        "ApiId" : {"Ref": "AppSyncApiId"},
        "TypeName" : "Mutation",
        "DataSourceName" : "FirstResponderProfile",
        "FieldName" : "updateFirstResponderProfile",
        "RequestMappingTemplate": "#set( $ddb = $util.dynamodb )\n{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"UpdateItem\",\n    \"key\" : {\n        \"phone_number\" : $ddb.toDynamoDBJson($ctx.args.phone_number)\n    },\n    ## Set up some space to keep track of things we're updating **\n    #set( $expNames  = {} )\n    #set( $expValues = {} )\n    #set( $expSet = {} )\n    #set( $expAdd = {} )\n    #set( $expRemove = [] )\n    ## Increment \"version\" by 1 **\n    $!{expAdd.put(\"version\", \":one\")}\n    $!{expValues.put(\":one\", $ddb.toDynamoDB(1))}\n    ## Set the \"lastUpdated\" timestamp **\n    $!{expSet.put(\"lastUpdated\", \":lastUpdated\")}\n    $!{expValues.put(\":lastUpdated\", $ddb.toDynamoDB($util.time.nowISO8601()))}\n    ## Iterate through each argument, skipping \"phone_number\" and \"expectedVersion\" **\n    #foreach( $entry in $util.map.copyAndRemoveAllKeys($ctx.args, [\"phone_number\",\"expectedVersion\"]).entrySet() )\n        #if( $util.isNull($entry.value) )\n            ## If the argument is set to \"null\", then remove that attribute from the item in DynamoDB **\n            #set( $discard = ${expRemove.add(\"#${entry.key}\")} )\n            $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n        #else\n            ## Otherwise set (or update) the attribute on the item in DynamoDB **\n            $!{expSet.put(\"#${entry.key}\", \":${entry.key}\")}\n            $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n            $!{expValues.put(\":${entry.key}\", $ddb.toDynamoDB($entry.value))}\n        #end\n    #end\n    ## Start building the update expression, starting with attributes we're going to SET **\n    #set( $expression = \"\" )\n    #if( !${expSet.isEmpty()} )\n        #set( $expression = \"SET\" )\n        foreach( $entry in $expSet.entrySet() )\n            set( $expression = \"${expression} ${entry.key} = ${entry.value}\" )\n            if ( $foreach.hasNext )\n                set( $expression = \"${expression},\" )\n            end\n        end\n    end\n    ## Continue building the update expression, adding attributes we're going to ADD **\n    #if( !${expAdd.isEmpty()} )\n        #set( $expression = \"${expression} ADD\" )\n        #foreach( $entry in $expAdd.entrySet() )\n            #set( $expression = \"${expression} ${entry.key} ${entry.value}\" )\n            #if ( $foreach.hasNext )\n                #set( $expression = \"${expression},\" )\n            #end\n        #end\n    #end\n    ## Continue building the update expression, adding attributes we're going to REMOVE **\n    #if( !${expRemove.isEmpty()} )\n        #set( $expression = \"${expression} REMOVE\" )\n        #foreach( $entry in $expRemove )\n            #set( $expression = \"${expression} ${entry}\" )\n            #if ( $foreach.hasNext )\n                #set( $expression = \"${expression},\" )\n            #end\n        #end\n    #end\n    ## Finally, write the update expression into the document, along with any expressionNames and expressionValues **\n    \"update\" : {\n        \"expression\" : \"${expression}\",\n        #if( !${expNames.isEmpty()} )\n            \"expressionNames\" : $utils.toJson($expNames),\n        #end\n        #if( !${expValues.isEmpty()} )\n            \"expressionValues\" : $utils.toJson($expValues),\n        #end\n    },\n    \"condition\" : {\n        \"expression\"       : \"attribute_exists(phone_number) and version = :expectedVersion\",\n        \"expressionValues\" : {\n            \":expectedVersion\" : $ddb.toDynamoDBJson($context.arguments.expectedVersion)\n        }\n    }\n}\n",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)"
      }
    },
    "MeetingDataDataSourceResolverQuery": {
      "Type" : "AWS::AppSync::Resolver",
      "DependsOn": "MeetingDataDataSource", 
      "Properties" : {
          "ApiId" : {"Ref": "AppSyncApiId"},
          "DataSourceName" : "MeetingData",
          "FieldName" : "getMeeting",
          "RequestMappingTemplate" : "{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"GetItem\",\n    \"key\" : {\n        \"id\" : $util.dynamodb.toDynamoDBJson($ctx.args.id)\n    }\n}\n",
          "ResponseMappingTemplate" : "$utils.toJson($ctx.result)",
          "TypeName" : "Query"
        }
    },
    "MeetingDataDataSourceResolverQueryAll": {
      "Type" : "AWS::AppSync::Resolver",
      "DependsOn": "MeetingDataDataSource", 
      "Properties" : {
          "ApiId" : {"Ref": "AppSyncApiId"},
          "DataSourceName" : "MeetingData",
          "FieldName" : "listMeetings",
          "TypeName" : "Query",
          "RequestMappingTemplate": "{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"Scan\",\n    #if( $ctx.args.count )\n        \"limit\": $ctx.args.count,\n    #end\n    #if( ${ctx.args.nextToken} )\n        \"nextToken\": \"${ctx.args.nextToken}\"\n    #end\n}\n",
          "ResponseMappingTemplate": "{\n    \"items\": $utils.toJson($ctx.result.items),\n    #if( ${ctx.result.nextToken} )\n        \"nextToken\": \"${ctx.result.nextToken}\",\n    #end\n}\n"
        }
    },
    "MeetingDataDataSourceResolverMutationCreate": {
      "Type" : "AWS::AppSync::Resolver",
      "DependsOn": "MeetingDataDataSource", 
      "Properties" : {
        "ApiId" : {"Ref": "AppSyncApiId"},
        "TypeName" : "Mutation",
        "DataSourceName" : "MeetingData",
        "FieldName" : "createMeeting",
        "RequestMappingTemplate": "#set( $d = $util.dynamodb )\n#set( $values = $d.toMapValues($ctx.args))\n$!{values.put(\"ups\", $d.toNumber(1))}\n$!{values.put(\"downs\", $d.toNumber(0))}\n$!{values.put(\"version\", $d.toNumber(1))}\n$!{values.put(\"created_at\", $d.toDynamoDB($util.time.nowISO8601()))}\n$!{values.put(\"lastUpdated\", $values.get(\"created_at\"))}\n{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"PutItem\",\n    \"key\" : {\n        \"id\" : $d.toStringJson($utils.autoId())\n    },\n    \"attributeValues\" : $util.toJson($values),\n}\n",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)"
      }
    },
    "MeetingDataDataSourceResolverMutationDelete": {
      "Type" : "AWS::AppSync::Resolver",
      "DependsOn": "MeetingDataDataSource", 
      "Properties" : {
        "ApiId" : {"Ref": "AppSyncApiId"},
        "TypeName" : "Mutation",
        "DataSourceName" : "MeetingData",
        "FieldName" : "deleteMeeting",
        "RequestMappingTemplate": "{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"DeleteItem\",\n    \"key\": {\n        \"id\": $util.dynamodb.toStringJson($ctx.args.id)\n    },\n    #if( $ctx.args.containsKey(\"expectedVersion\") )\n        \"condition\" : {\n            \"expression\"       : \"attribute_not_exists(id) OR version = :expectedVersion\",\n            \"expressionValues\" : {\n                \":expectedVersion\" : $util.dynamodb.toNumberJson($ctx.args.expectedVersion)\n            }\n        },\n    #end\n}\n",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)"
      }
    },
    "MeetingDataDataSourceResolverMutationUpdate": {
      "Type" : "AWS::AppSync::Resolver",
      "DependsOn": "MeetingDetailDataSource", 
      "Properties" : {
        "ApiId" : {"Ref": "AppSyncApiId"},
        "TypeName" : "Mutation",
        "DataSourceName" : "MeetingData",
        "FieldName" : "updateMeeting",
        "RequestMappingTemplate": "#set( $ddb = $util.dynamodb )\n{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"UpdateItem\",\n    \"key\" : {\n        \"id\" : $ddb.toDynamoDBJson($ctx.args.id)\n    },\n    ## Set up some space to keep track of things we're updating **\n    #set( $expNames  = {} )\n    #set( $expValues = {} )\n    #set( $expSet = {} )\n    #set( $expAdd = {} )\n    #set( $expRemove = [] )\n    ## Increment \"version\" by 1 **\n    $!{expAdd.put(\"version\", \":one\")}\n    $!{expValues.put(\":one\", $ddb.toDynamoDB(1))}\n    ## Set the \"lastUpdated\" timestamp **\n    $!{expSet.put(\"lastUpdated\", \":lastUpdated\")}\n    $!{expValues.put(\":lastUpdated\", $ddb.toDynamoDB($util.time.nowISO8601()))}\n    ## Iterate through each argument, skipping \"id\" and \"expectedVersion\" **\n    #foreach( $entry in $util.map.copyAndRemoveAllKeys($ctx.args, [\"id\",\"expectedVersion\"]).entrySet() )\n        #if( $util.isNull($entry.value) )\n            ## If the argument is set to \"null\", then remove that attribute from the item in DynamoDB **\n            #set( $discard = ${expRemove.add(\"#${entry.key}\")} )\n            $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n        #else\n            ## Otherwise set (or update) the attribute on the item in DynamoDB **\n            $!{expSet.put(\"#${entry.key}\", \":${entry.key}\")}\n            $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n            $!{expValues.put(\":${entry.key}\", $ddb.toDynamoDB($entry.value))}\n        #end\n    #end\n    ## Start building the update expression, starting with attributes we're going to SET **\n    #set( $expression = \"\" )\n    #if( !${expSet.isEmpty()} )\n        #set( $expression = \"SET\" )\n        foreach( $entry in $expSet.entrySet() )\n            set( $expression = \"${expression} ${entry.key} = ${entry.value}\" )\n            if ( $foreach.hasNext )\n                set( $expression = \"${expression},\" )\n            end\n        end\n    end\n    ## Continue building the update expression, adding attributes we're going to ADD **\n    #if( !${expAdd.isEmpty()} )\n        #set( $expression = \"${expression} ADD\" )\n        #foreach( $entry in $expAdd.entrySet() )\n            #set( $expression = \"${expression} ${entry.key} ${entry.value}\" )\n            #if ( $foreach.hasNext )\n                #set( $expression = \"${expression},\" )\n            #end\n        #end\n    #end\n    ## Continue building the update expression, adding attributes we're going to REMOVE **\n    #if( !${expRemove.isEmpty()} )\n        #set( $expression = \"${expression} REMOVE\" )\n        #foreach( $entry in $expRemove )\n            #set( $expression = \"${expression} ${entry}\" )\n            #if ( $foreach.hasNext )\n                #set( $expression = \"${expression},\" )\n            #end\n        #end\n    #end\n    ## Finally, write the update expression into the document, along with any expressionNames and expressionValues **\n    \"update\" : {\n        \"expression\" : \"${expression}\",\n        #if( !${expNames.isEmpty()} )\n            \"expressionNames\" : $utils.toJson($expNames),\n        #end\n        #if( !${expValues.isEmpty()} )\n            \"expressionValues\" : $utils.toJson($expValues),\n        #end\n    },\n    \"condition\" : {\n        \"expression\"       : \"attribute_exists(id) and version = :expectedVersion\",\n        \"expressionValues\" : {\n            \":expectedVersion\" : $ddb.toDynamoDBJson($context.arguments.expectedVersion)\n        }\n    }\n}\n",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)"
      }
    },
    "MeetingDetailDataSourceResolverQuery": {
      "Type" : "AWS::AppSync::Resolver",
      "DependsOn": "MeetingDetailDataSource", 
      "Properties" : {
          "ApiId" : {"Ref": "AppSyncApiId"},
          "DataSourceName" : "MeetingDetail",
          "FieldName" : "getMeetingDetail",
          "RequestMappingTemplate" : "{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"GetItem\",\n    \"key\" : {\n        \"meeting_id\" : $util.dynamodb.toDynamoDBJson($ctx.args.meeting_id)\n    }\n}\n",
          "ResponseMappingTemplate" : "$utils.toJson($ctx.result)",
          "TypeName" : "Query"
        }
    },
    "MeetingDetailDataSourceResolverQueryAll": {
      "Type" : "AWS::AppSync::Resolver",
      "DependsOn": "MeetingDetailDataSource", 
      "Properties" : {
          "ApiId" : {"Ref": "AppSyncApiId"},
          "DataSourceName" : "MeetingDetail",
          "FieldName" : "listMeetingDetails",
          "TypeName" : "Query",
          "RequestMappingTemplate": "{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"Scan\",\n    #if( $ctx.args.count )\n        \"limit\": $ctx.args.count,\n    #end\n    #if( ${ctx.args.nextToken} )\n        \"nextToken\": \"${ctx.args.nextToken}\"\n    #end\n}\n",
          "ResponseMappingTemplate": "{\n    \"items\": $utils.toJson($ctx.result.items),\n    #if( ${ctx.result.nextToken} )\n        \"nextToken\": \"${ctx.result.nextToken}\",\n    #end\n}\n"
        }
    },
    "MeetingDetailDataSourceResolverMutationCreate": {
      "Type" : "AWS::AppSync::Resolver",
      "DependsOn": "MeetingDetailDataSource", 
      "Properties" : {
        "ApiId" : {"Ref": "AppSyncApiId"},
        "TypeName" : "Mutation",
        "DataSourceName" : "MeetingDetail",
        "FieldName" : "createMeetingDetail",
        "RequestMappingTemplate": "#set( $d = $util.dynamodb )\n#set( $values = $d.toMapValues($ctx.args))\n$!{values.put(\"ups\", $d.toNumber(1))}\n$!{values.put(\"downs\", $d.toNumber(0))}\n$!{values.put(\"version\", $d.toNumber(1))}\n$!{values.put(\"created_at\", $d.toDynamoDB($util.time.nowISO8601()))}\n$!{values.put(\"lastUpdated\", $values.get(\"created_at\"))}\n{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"PutItem\",\n    \"key\" : {\n        \"meeting_id\" : $d.toStringJson($utils.autoId())\n    },\n    \"attributeValues\" : $util.toJson($values),\n}\n",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)"
      }
    },
    "MeetingDetailDataSourceResolverMutationDelete": {
      "Type" : "AWS::AppSync::Resolver",
      "DependsOn": "MeetingDetailDataSource", 
      "Properties" : {
        "ApiId" : {"Ref": "AppSyncApiId"},
        "TypeName" : "Mutation",
        "DataSourceName" : "MeetingDetail",
        "FieldName" : "deleteMeetingDetail",
        "RequestMappingTemplate": "{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"DeleteItem\",\n    \"key\": {\n        \"meeting_id\": $util.dynamodb.toStringJson($ctx.args.meeting_id)\n    },\n    #if( $ctx.args.containsKey(\"expectedVersion\") )\n        \"condition\" : {\n            \"expression\"       : \"attribute_not_exists(meeting_id) OR version = :expectedVersion\",\n            \"expressionValues\" : {\n                \":expectedVersion\" : $util.dynamodb.toNumberJson($ctx.args.expectedVersion)\n            }\n        },\n    #end\n}\n",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)"
      }
    },
    "MeetingDetailDataSourceResolverMutationUpdate": {
      "Type" : "AWS::AppSync::Resolver",
      "DependsOn": "MeetingDetailDataSource", 
      "Properties" : {
        "ApiId" : {"Ref": "AppSyncApiId"},
        "TypeName" : "Mutation",
        "DataSourceName" : "MeetingDetail",
        "FieldName" : "updateMeetingDetail",
        "RequestMappingTemplate": "#set( $ddb = $util.dynamodb )\n{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"UpdateItem\",\n    \"key\" : {\n        \"meeting_id\" : $ddb.toDynamoDBJson($ctx.args.meeting_id)\n    },\n    ## Set up some space to keep track of things we're updating **\n    #set( $expNames  = {} )\n    #set( $expValues = {} )\n    #set( $expSet = {} )\n    #set( $expAdd = {} )\n    #set( $expRemove = [] )\n    ## Increment \"version\" by 1 **\n    $!{expAdd.put(\"version\", \":one\")}\n    $!{expValues.put(\":one\", $ddb.toDynamoDB(1))}\n    ## Set the \"lastUpdated\" timestamp **\n    $!{expSet.put(\"lastUpdated\", \":lastUpdated\")}\n    $!{expValues.put(\":lastUpdated\", $ddb.toDynamoDB($util.time.nowISO8601()))}\n    ## Iterate through each argument, skipping \"meeting_id\" and \"expectedVersion\" **\n    #foreach( $entry in $util.map.copyAndRemoveAllKeys($ctx.args, [\"meeting_id\",\"expectedVersion\"]).entrySet() )\n        #if( $util.isNull($entry.value) )\n            ## If the argument is set to \"null\", then remove that attribute from the item in DynamoDB **\n            #set( $discard = ${expRemove.add(\"#${entry.key}\")} )\n            $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n        #else\n            ## Otherwise set (or update) the attribute on the item in DynamoDB **\n            $!{expSet.put(\"#${entry.key}\", \":${entry.key}\")}\n            $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n            $!{expValues.put(\":${entry.key}\", $ddb.toDynamoDB($entry.value))}\n        #end\n    #end\n    ## Start building the update expression, starting with attributes we're going to SET **\n    #set( $expression = \"\" )\n    #if( !${expSet.isEmpty()} )\n        #set( $expression = \"SET\" )\n        foreach( $entry in $expSet.entrySet() )\n            set( $expression = \"${expression} ${entry.key} = ${entry.value}\" )\n            if ( $foreach.hasNext )\n                set( $expression = \"${expression},\" )\n            end\n        end\n    end\n    ## Continue building the update expression, adding attributes we're going to ADD **\n    #if( !${expAdd.isEmpty()} )\n        #set( $expression = \"${expression} ADD\" )\n        #foreach( $entry in $expAdd.entrySet() )\n            #set( $expression = \"${expression} ${entry.key} ${entry.value}\" )\n            #if ( $foreach.hasNext )\n                #set( $expression = \"${expression},\" )\n            #end\n        #end\n    #end\n    ## Continue building the update expression, adding attributes we're going to REMOVE **\n    #if( !${expRemove.isEmpty()} )\n        #set( $expression = \"${expression} REMOVE\" )\n        #foreach( $entry in $expRemove )\n            #set( $expression = \"${expression} ${entry}\" )\n            #if ( $foreach.hasNext )\n                #set( $expression = \"${expression},\" )\n            #end\n        #end\n    #end\n    ## Finally, write the update expression into the document, along with any expressionNames and expressionValues **\n    \"update\" : {\n        \"expression\" : \"${expression}\",\n        #if( !${expNames.isEmpty()} )\n            \"expressionNames\" : $utils.toJson($expNames),\n        #end\n        #if( !${expValues.isEmpty()} )\n            \"expressionValues\" : $utils.toJson($expValues),\n        #end\n    },\n    \"condition\" : {\n        \"expression\"       : \"attribute_exists(meeting_id) and version = :expectedVersion\",\n        \"expressionValues\" : {\n            \":expectedVersion\" : $ddb.toDynamoDBJson($context.arguments.expectedVersion)\n        }\n    }\n}\n",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)"
      }
    },
    "SpecialistProfileDataSourceResolverQuery": {
      "Type" : "AWS::AppSync::Resolver",
      "DependsOn": "SpecialistProfileDataSource", 
      "Properties" : {
          "ApiId" : {"Ref": "AppSyncApiId"},
          "DataSourceName" : "SpecialistProfile",
          "FieldName" : "getSpecialistProfile",
          "RequestMappingTemplate" : "{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"GetItem\",\n    \"key\" : {\n        \"phone_number\" : $util.dynamodb.toDynamoDBJson($ctx.args.phone_number)\n    }\n}\n",
          "ResponseMappingTemplate" : "$utils.toJson($ctx.result)",
          "TypeName" : "Query"
        }
    },
    "SpecialistProfileDataSourceResolverQueryAll": {
      "Type" : "AWS::AppSync::Resolver",
      "DependsOn": "SpecialistProfileDataSource", 
      "Properties" : {
          "ApiId" : {"Ref": "AppSyncApiId"},
          "DataSourceName" : "SpecialistProfile",
          "FieldName" : "listSpecialistProfiles",
          "TypeName" : "Query",
          "RequestMappingTemplate": "{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"Scan\",\n    #if( $ctx.args.count )\n        \"limit\": $ctx.args.count,\n    #end\n    #if( ${ctx.args.nextToken} )\n        \"nextToken\": \"${ctx.args.nextToken}\"\n    #end\n}\n",
          "ResponseMappingTemplate": "{\n    \"items\": $utils.toJson($ctx.result.items),\n    #if( ${ctx.result.nextToken} )\n        \"nextToken\": \"${ctx.result.nextToken}\",\n    #end\n}\n"
        }
    },
    "SpecialistProfileDataSourceResolverMutationCreate": {
      "Type" : "AWS::AppSync::Resolver",
      "DependsOn": "SpecialistProfileDataSource", 
      "Properties" : {
        "ApiId" : {"Ref": "AppSyncApiId"},
        "TypeName" : "Mutation",
        "DataSourceName" : "SpecialistProfile",
        "FieldName" : "createSpecialistProfile",
        "RequestMappingTemplate": "#set( $d = $util.dynamodb )\n#set( $values = $d.toMapValues($ctx.args))\n$!{values.put(\"ups\", $d.toNumber(1))}\n$!{values.put(\"downs\", $d.toNumber(0))}\n$!{values.put(\"version\", $d.toNumber(1))}\n$!{values.put(\"created_at\", $d.toDynamoDB($util.time.nowISO8601()))}\n$!{values.put(\"lastUpdated\", $values.get(\"created_at\"))}\n{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"PutItem\",\n    \"key\" : {\n        \"phone_number\" : $d.toStringJson($utils.autoId())\n    },\n    \"attributeValues\" : $util.toJson($values),\n}\n",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)"
      }
    },
    "SpecialistProfileDataSourceResolverMutationDelete": {
      "Type" : "AWS::AppSync::Resolver",
      "DependsOn": "SpecialistProfileDataSource", 
      "Properties" : {
        "ApiId" : {"Ref": "AppSyncApiId"},
        "TypeName" : "Mutation",
        "DataSourceName" : "SpecialistProfile",
        "FieldName" : "deleteSpecialistProfile",
        "RequestMappingTemplate": "{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"DeleteItem\",\n    \"key\": {\n        \"phone_number\": $util.dynamodb.toStringJson($ctx.args.phone_number)\n    },\n    #if( $ctx.args.containsKey(\"expectedVersion\") )\n        \"condition\" : {\n            \"expression\"       : \"attribute_not_exists(phone_number) OR version = :expectedVersion\",\n            \"expressionValues\" : {\n                \":expectedVersion\" : $util.dynamodb.toNumberJson($ctx.args.expectedVersion)\n            }\n        },\n    #end\n}\n",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)"
      }
    },
    "SpecialistProfileDataSourceResolverMutationUpdate": {
      "Type" : "AWS::AppSync::Resolver",
      "DependsOn": "SpecialistProfileDataSource", 
      "Properties" : {
        "ApiId" : {"Ref": "AppSyncApiId"},
        "TypeName" : "Mutation",
        "DataSourceName" : "SpecialistProfile",
        "FieldName" : "updateSpecialistProfile",
        "RequestMappingTemplate": "#set( $ddb = $util.dynamodb )\n{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"UpdateItem\",\n    \"key\" : {\n        \"phone_number\" : $ddb.toDynamoDBJson($ctx.args.phone_number)\n    },\n    ## Set up some space to keep track of things we're updating **\n    #set( $expNames  = {} )\n    #set( $expValues = {} )\n    #set( $expSet = {} )\n    #set( $expAdd = {} )\n    #set( $expRemove = [] )\n    ## Increment \"version\" by 1 **\n    $!{expAdd.put(\"version\", \":one\")}\n    $!{expValues.put(\":one\", $ddb.toDynamoDB(1))}\n    ## Set the \"lastUpdated\" timestamp **\n    $!{expSet.put(\"lastUpdated\", \":lastUpdated\")}\n    $!{expValues.put(\":lastUpdated\", $ddb.toDynamoDB($util.time.nowISO8601()))}\n    ## Iterate through each argument, skipping \"phone_number\" and \"expectedVersion\" **\n    #foreach( $entry in $util.map.copyAndRemoveAllKeys($ctx.args, [\"phone_number\",\"expectedVersion\"]).entrySet() )\n        #if( $util.isNull($entry.value) )\n            ## If the argument is set to \"null\", then remove that attribute from the item in DynamoDB **\n            #set( $discard = ${expRemove.add(\"#${entry.key}\")} )\n            $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n        #else\n            ## Otherwise set (or update) the attribute on the item in DynamoDB **\n            $!{expSet.put(\"#${entry.key}\", \":${entry.key}\")}\n            $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n            $!{expValues.put(\":${entry.key}\", $ddb.toDynamoDB($entry.value))}\n        #end\n    #end\n    ## Start building the update expression, starting with attributes we're going to SET **\n    #set( $expression = \"\" )\n    #if( !${expSet.isEmpty()} )\n        #set( $expression = \"SET\" )\n        foreach( $entry in $expSet.entrySet() )\n            set( $expression = \"${expression} ${entry.key} = ${entry.value}\" )\n            if ( $foreach.hasNext )\n                set( $expression = \"${expression},\" )\n            end\n        end\n    end\n    ## Continue building the update expression, adding attributes we're going to ADD **\n    #if( !${expAdd.isEmpty()} )\n        #set( $expression = \"${expression} ADD\" )\n        #foreach( $entry in $expAdd.entrySet() )\n            #set( $expression = \"${expression} ${entry.key} ${entry.value}\" )\n            #if ( $foreach.hasNext )\n                #set( $expression = \"${expression},\" )\n            #end\n        #end\n    #end\n    ## Continue building the update expression, adding attributes we're going to REMOVE **\n    #if( !${expRemove.isEmpty()} )\n        #set( $expression = \"${expression} REMOVE\" )\n        #foreach( $entry in $expRemove )\n            #set( $expression = \"${expression} ${entry}\" )\n            #if ( $foreach.hasNext )\n                #set( $expression = \"${expression},\" )\n            #end\n        #end\n    #end\n    ## Finally, write the update expression into the document, along with any expressionNames and expressionValues **\n    \"update\" : {\n        \"expression\" : \"${expression}\",\n        #if( !${expNames.isEmpty()} )\n            \"expressionNames\" : $utils.toJson($expNames),\n        #end\n        #if( !${expValues.isEmpty()} )\n            \"expressionValues\" : $utils.toJson($expValues),\n        #end\n    },\n    \"condition\" : {\n        \"expression\"       : \"attribute_exists(phone_number) and version = :expectedVersion\",\n        \"expressionValues\" : {\n            \":expectedVersion\" : $ddb.toDynamoDBJson($context.arguments.expectedVersion)\n        }\n    }\n}\n",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)"
      }
    }
    
  },
  "Conditions": {
    "HasEnvironmentParameter": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "env"
            },
            "NONE"
          ]
        }
      ]
    },
    "AlwaysFalse": {
      "Fn::Equals": [
        "true",
        "false"
      ]
    }
  },
  "Outputs": {
    "AppSyncApiId": {
      "Description": "The id of the AppSync API associated with this project.",
      "Value": {
        "Ref": "AppSyncApiId"
      }
    },
    "EmptyOutput": {
      "Description": "An empty output. You may delete this if you have at least one resource above.",
      "Value": ""
    }
  }
}