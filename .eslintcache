[{"/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/styling/Layout.tsx":"1","/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/physician/PhysicianMain.tsx":"2","/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/physician/Alerts.tsx":"3","/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/serviceWorkerRegistration.ts":"4","/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/styling/Header.tsx":"5","/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/firstresponder/FirstResponderMain.tsx":"6","/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/Router.tsx":"7","/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/Home.tsx":"8","/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/physician/PhysicianProfile.tsx":"9","/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/reportWebVitals.ts":"10","/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/physician/Availability.tsx":"11","/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/physician/ContactInfo.tsx":"12","/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/shared/Call.tsx":"13","/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/App.tsx":"14","/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/index.tsx":"15","/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/shared/OnlineCall.tsx":"16","/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/shared/OfflineCall.tsx":"17","/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/graphql/mutations.ts":"18","/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/aws-exports.js":"19","/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/shared/RosterDisplay.tsx":"20","/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/shared/VideoGridDisplay.tsx":"21","/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/graphql/queries.ts":"22"},{"size":886,"mtime":1613670101033,"results":"23","hashOfConfig":"24"},{"size":552,"mtime":1612998869218,"results":"25","hashOfConfig":"26"},{"size":192,"mtime":1612998923104,"results":"27","hashOfConfig":"26"},{"size":5256,"mtime":1612988457532,"results":"28","hashOfConfig":"24"},{"size":677,"mtime":1613672341308,"results":"29","hashOfConfig":"24"},{"size":488,"mtime":1612999813340,"results":"30","hashOfConfig":"26"},{"size":1747,"mtime":1613670101031,"results":"31","hashOfConfig":"24"},{"size":700,"mtime":1613676915829,"results":"32","hashOfConfig":"24"},{"size":567,"mtime":1612999483388,"results":"33","hashOfConfig":"26"},{"size":425,"mtime":1612987902051,"results":"34","hashOfConfig":"24"},{"size":1943,"mtime":1613066152639,"results":"35","hashOfConfig":"24"},{"size":193,"mtime":1612999413981,"results":"36","hashOfConfig":"26"},{"size":281,"mtime":1613066593363,"results":"37","hashOfConfig":"24"},{"size":351,"mtime":1613512216297,"results":"38","hashOfConfig":"24"},{"size":816,"mtime":1612988446494,"results":"39","hashOfConfig":"24"},{"size":4926,"mtime":1613673132056,"results":"40","hashOfConfig":"24"},{"size":416,"mtime":1613675138517,"results":"41","hashOfConfig":"24"},{"size":3902,"mtime":1613589602756,"results":"42","hashOfConfig":"24"},{"size":478,"mtime":1613589605640,"results":"43","hashOfConfig":"24"},{"size":2029,"mtime":1613670101033,"results":"44","hashOfConfig":"24"},{"size":718,"mtime":1613513860123,"results":"45","hashOfConfig":"24"},{"size":1780,"mtime":1613599602094,"results":"46","hashOfConfig":"24"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"pxq69c",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"15fn7fk",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/styling/Layout.tsx",[],"/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/physician/PhysicianMain.tsx",[],"/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/physician/Alerts.tsx",[],"/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/serviceWorkerRegistration.ts",["97","98"],"// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n",[],"/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/styling/Header.tsx",["99"],"/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/firstresponder/FirstResponderMain.tsx",[],"/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/Router.tsx",["100"],"/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/Home.tsx",[],"/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/physician/PhysicianProfile.tsx",[],"/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/reportWebVitals.ts",["101"],"import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n",[],"/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/physician/Availability.tsx",[],"/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/physician/ContactInfo.tsx",[],"/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/shared/Call.tsx",["102"],"/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/App.tsx",[],"/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/index.tsx",[],[],"/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/shared/OnlineCall.tsx",["103","104","105"],"import { GraphQLResult } from \"@aws-amplify/api\";\nimport { Button } from \"@material-ui/core\";\nimport {\n  LocalVideo,\n  MicSelection,\n  RemoteVideo,\n  SpeakerSelection,\n  useAudioVideo,\n  useLocalVideo,\n  useMeetingManager,\n  useRosterState,\n  VideoTileGrid,\n} from \"amazon-chime-sdk-component-library-react\";\nimport Amplify, { API, graphqlOperation } from \"aws-amplify\";\nimport React, { ReactElement, useEffect } from \"react\";\nimport {\n  GetAttendeeQuery,\n  GetAttendeeQueryVariables,\n  JoinChimeMeetingMutation,\n  JoinChimeMeetingMutationVariables,\n} from \"../../API\";\nimport config from \"../../aws-exports\";\nimport { joinChimeMeeting } from \"../../graphql/mutations\";\nimport { getAttendee } from \"../../graphql/queries\";\nimport \"../../styles/VideoCall.css\";\nimport Layout from \"../styling/Layout\";\nimport RosterDisplay from \"./RosterDisplay\";\nimport { v4 as uuid } from \"uuid\";\n\nAmplify.configure(config);\n\nconst OnlineCall = (): ReactElement => {\n  const { toggleVideo } = useLocalVideo();\n  const audioVideo = useAudioVideo();\n  const meetingManager = useMeetingManager();\n  const { roster } = useRosterState();\n  const meetingId = uuid();\n\n  const fetchAttendee = (options: GetAttendeeQueryVariables) => {\n    return API.graphql(graphqlOperation(getAttendee, options)) as Promise<\n      GraphQLResult<GetAttendeeQuery>\n    >;\n  };\n  const joinMeeting = (options: JoinChimeMeetingMutationVariables) => {\n    return API.graphql(\n      graphqlOperation(joinChimeMeeting, options)\n    ) as GraphQLResult<JoinChimeMeetingMutation>;\n  };\n\n  /** On mount */\n  useEffect(() => {\n    handleCreateandJoinMeeting(meetingId, \"Trevor\");\n    meetingManager.getAttendee = async (chimeAttendeeId) => {\n      try {\n        const res = await fetchAttendee({ id: chimeAttendeeId });\n        console.log(res);\n\n        if (res.errors) {\n          console.error(res.errors);\n        }\n        return Promise.resolve({ name: res.data?.getAttendee?.Name });\n      } catch (e) {\n        console.log(\"Failed to get attendee's name: \", e);\n\n        return {};\n      }\n    };\n  }, []);\n\n  /** On change of roster */\n  useEffect(() => {\n    const attendees = Object.values(roster);\n    console.log(attendees);\n  }, [roster]);\n\n  /** On change of audio/video when call starts */\n  useEffect(() => {\n    const f = async () => {\n      /** Get and Bind User Devices to Chime Infrastructure */\n      if (!audioVideo) return;\n      try {\n        const audioInputs: MediaDeviceInfo[] = await audioVideo.listAudioInputDevices();\n        const videoInputs: MediaDeviceInfo[] = await audioVideo.listVideoInputDevices();\n        await audioVideo.chooseVideoInputDevice(videoInputs[0].deviceId);\n        await audioVideo.chooseAudioInputDevice(audioInputs[0].deviceId);\n      } catch (err) {\n        // handle error - unable to acquire audio device perhaps due to permissions blocking\n      }\n      const audioOutputElement = document.getElementById(\"meeting-audio\");\n      // const videoOutputElement = document.getElementById(\"meeting-video\");\n\n      // await audioVideo.bindVideoElement(\n      //   0,\n      //   videoOutputElement as HTMLVideoElement\n      // );\n\n      // await audioVideo.bindAudioElement(audioOutputElement as HTMLAudioElement);\n\n      audioVideo.start();\n      toggleVideo();\n    };\n    if (audioVideo) f();\n  }, [audioVideo]);\n\n  const handleCreateandJoinMeeting = async (title: string, name: string) => {\n    /** Get Meeting data from Lambda call to DynamoDB */\n    const joinRes = await joinMeeting({ title, name });\n\n    const meetingInfo = joinRes.data?.joinChimeMeeting?.Meeting;\n    const attendeeInfo = { ...joinRes.data?.joinChimeMeeting?.Attendee, name };\n    console.log(meetingInfo, attendeeInfo);\n\n    await meetingManager.join({ meetingInfo, attendeeInfo });\n  };\n\n  return (\n    <Layout title=\"Online Call\">\n      <div\n        style={{\n          objectFit: \"contain\",\n          height: \"70%\",\n          // minHeight: \"100px\",\n          // maxHeight: \"300px\",\n          display: \"flex\",\n          flexDirection: \"column\",\n        }}\n      >\n        <VideoTileGrid\n          layout=\"standard\"\n          noRemoteVideoView={\n            // TODO Convert into smarter component\n            <div>\n              {/* <LocalVideo />{\" \"} */}\n              <div style={{ color: \"white\", minHeight: \"300px\" }}>\n                Nobody is sharing video at the moment\n              </div>\n            </div>\n          }\n        />\n        {/* <VideoTileGrid></VideoTileGrid>\n        <LocalVideo\n        // css={\n        // \"object-fit: contain; width: 100%; height: 100%; position: relative !important;  \"\n        // }\n        />\n        <RemoteVideo tileId={0} /> */}\n        <Button onClick={toggleVideo}>Toggle</Button>\n        <audio id=\"meeting-audio\" style={{ display: \"none\" }}></audio>\n        <MicSelection />\n        <SpeakerSelection />\n        <RosterDisplay />\n      </div>\n    </Layout>\n  );\n};\n\nexport default OnlineCall;\n","/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/shared/OfflineCall.tsx",[],"/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/graphql/mutations.ts",[],"/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/aws-exports.js",[],"/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/shared/RosterDisplay.tsx",["106","107","108","109","110"],"/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/shared/VideoGridDisplay.tsx",[],"/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/graphql/queries.ts",[],{"ruleId":"111","severity":1,"message":"112","line":26,"column":8,"nodeType":"113","messageId":"114","endLine":26,"endColumn":42},{"ruleId":"111","severity":1,"message":"112","line":132,"column":8,"nodeType":"113","messageId":"114","endLine":132,"endColumn":29},{"ruleId":"115","severity":1,"message":"116","line":6,"column":3,"nodeType":"117","messageId":"118","endLine":6,"endColumn":9},{"ruleId":"115","severity":1,"message":"119","line":12,"column":3,"nodeType":"117","messageId":"118","endLine":12,"endColumn":17},{"ruleId":"111","severity":1,"message":"112","line":3,"column":25,"nodeType":"120","messageId":"114","endLine":3,"endColumn":57},{"ruleId":"115","severity":1,"message":"121","line":2,"column":8,"nodeType":"117","messageId":"118","endLine":2,"endColumn":14},{"ruleId":"115","severity":1,"message":"122","line":4,"column":3,"nodeType":"117","messageId":"118","endLine":4,"endColumn":13},{"ruleId":"115","severity":1,"message":"123","line":6,"column":3,"nodeType":"117","messageId":"118","endLine":6,"endColumn":14},{"ruleId":"115","severity":1,"message":"124","line":89,"column":13,"nodeType":"117","messageId":"118","endLine":89,"endColumn":31},{"ruleId":"115","severity":1,"message":"125","line":5,"column":3,"nodeType":"117","messageId":"118","endLine":5,"endColumn":13},{"ruleId":"115","severity":1,"message":"126","line":9,"column":10,"nodeType":"117","messageId":"118","endLine":9,"endColumn":22},{"ruleId":"115","severity":1,"message":"127","line":9,"column":24,"nodeType":"117","messageId":"118","endLine":9,"endColumn":33},{"ruleId":"111","severity":1,"message":"112","line":52,"column":23,"nodeType":"120","messageId":"114","endLine":52,"endColumn":28},{"ruleId":"115","severity":1,"message":"128","line":57,"column":30,"nodeType":"117","messageId":"118","endLine":57,"endColumn":34},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","FunctionDeclaration","missingReturnType","@typescript-eslint/no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'RosterProvider' is defined but never used.","ArrowFunctionExpression","'Layout' is defined but never used.","'LocalVideo' is defined but never used.","'RemoteVideo' is defined but never used.","'audioOutputElement' is assigned a value but never used.","'RosterCell' is defined but never used.","'ReactElement' is defined but never used.","'useEffect' is defined but never used.","'name' is assigned a value but never used."]