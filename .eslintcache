[{"/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/styling/Layout.tsx":"1","/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/physician/PhysicianMain.tsx":"2","/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/physician/Alerts.tsx":"3","/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/serviceWorkerRegistration.ts":"4","/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/styling/Header.tsx":"5","/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/firstresponder/FirstResponderMain.tsx":"6","/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/Router.tsx":"7","/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/Home.tsx":"8","/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/physician/PhysicianProfile.tsx":"9","/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/reportWebVitals.ts":"10","/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/physician/Availability.tsx":"11","/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/physician/ContactInfo.tsx":"12","/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/shared/Call.tsx":"13"},{"size":886,"mtime":1612998617026,"results":"14","hashOfConfig":"15"},{"size":552,"mtime":1612998869218,"results":"16","hashOfConfig":"15"},{"size":192,"mtime":1612998923104,"results":"17","hashOfConfig":"15"},{"size":5256,"mtime":1612988457532,"results":"18","hashOfConfig":"15"},{"size":677,"mtime":1612998469571,"results":"19","hashOfConfig":"15"},{"size":488,"mtime":1612999813340,"results":"20","hashOfConfig":"15"},{"size":1525,"mtime":1612999873813,"results":"21","hashOfConfig":"15"},{"size":700,"mtime":1612996620033,"results":"22","hashOfConfig":"15"},{"size":567,"mtime":1612999483388,"results":"23","hashOfConfig":"15"},{"size":425,"mtime":1612987902051,"results":"24","hashOfConfig":"15"},{"size":2086,"mtime":1613004982856,"results":"25","hashOfConfig":"15"},{"size":193,"mtime":1612999413981,"results":"26","hashOfConfig":"15"},{"size":185,"mtime":1612999928146,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"15fn7fk",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/styling/Layout.tsx",[],"/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/physician/PhysicianMain.tsx",[],"/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/physician/Alerts.tsx",[],"/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/serviceWorkerRegistration.ts",["56","57"],"// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/styling/Header.tsx",["58"],"import {\n  IconButton,\n  AppBar,\n  Toolbar,\n  Typography,\n  Button,\n} from \"@material-ui/core\";\nimport React, { ReactElement } from \"react\";\nimport { ArrowBack } from \"@material-ui/icons\";\nimport { useHistory } from \"react-router-dom\";\nconst Header = ({ title }: { title?: string }): ReactElement => {\n  const history = useHistory();\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <IconButton\n          edge=\"start\"\n          color=\"inherit\"\n          onClick={() => history.goBack()}\n        >\n          <ArrowBack />\n        </IconButton>\n        <Typography variant=\"h6\">{title}</Typography>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default Header;\n","/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/firstresponder/FirstResponderMain.tsx",[],"/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/Router.tsx",[],"/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/Home.tsx",[],"/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/physician/PhysicianProfile.tsx",[],"/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/reportWebVitals.ts",["59"],"/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/physician/Availability.tsx",["60","61","62","63","64","65"],"/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/physician/ContactInfo.tsx",[],"/Users/trevorflanigan/Desktop/Projects/STARS/stars-pwa/src/components/shared/Call.tsx",[],{"ruleId":"66","severity":1,"message":"67","line":26,"column":8,"nodeType":"68","messageId":"69","endLine":26,"endColumn":42},{"ruleId":"66","severity":1,"message":"67","line":132,"column":8,"nodeType":"68","messageId":"69","endLine":132,"endColumn":29},{"ruleId":"70","severity":1,"message":"71","line":6,"column":3,"nodeType":"72","messageId":"73","endLine":6,"endColumn":9},{"ruleId":"66","severity":1,"message":"67","line":3,"column":25,"nodeType":"74","messageId":"69","endLine":3,"endColumn":57},{"ruleId":"70","severity":1,"message":"75","line":1,"column":10,"nodeType":"72","messageId":"73","endLine":1,"endColumn":19},{"ruleId":"70","severity":1,"message":"76","line":1,"column":35,"nodeType":"72","messageId":"73","endLine":1,"endColumn":44},{"ruleId":"70","severity":1,"message":"77","line":1,"column":46,"nodeType":"72","messageId":"73","endLine":1,"endColumn":55},{"ruleId":"70","severity":1,"message":"71","line":4,"column":10,"nodeType":"72","messageId":"73","endLine":4,"endColumn":16},{"ruleId":"70","severity":1,"message":"78","line":30,"column":10,"nodeType":"72","messageId":"73","endLine":30,"endColumn":22},{"ruleId":"70","severity":1,"message":"79","line":30,"column":24,"nodeType":"72","messageId":"73","endLine":30,"endColumn":39},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","FunctionDeclaration","missingReturnType","@typescript-eslint/no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","ArrowFunctionExpression","'createRef' is defined but never used.","'ReactNode' is defined but never used.","'useEffect' is defined but never used.","'selectedDays' is assigned a value but never used.","'setSelectedDays' is assigned a value but never used."]